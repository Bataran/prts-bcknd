"use strict";
// Copyright IBM Corp. 2017. All Rights Reserved.
// Node module: @loopback/repository
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("@loopback/context");
const model_1 = require("../model");
exports.MODEL_KEY = 'loopback:model';
exports.PROPERTY_KEY = 'loopback:property';
exports.MODEL_PROPERTIES_KEY = 'loopback:model-properties';
// tslint:disable:no-any
/**
 * Decorator for model definitions
 * @param definition
 * @returns {(target:any)}
 */
function model(definition) {
    return function (target) {
        if (!definition) {
            definition = { name: target.name };
        }
        // Apply model definition to the model class
        context_1.Reflector.defineMetadata(exports.MODEL_KEY, definition, target);
        // Build "ModelDefinition" and store it on model constructor
        const modelDef = new model_1.ModelDefinition(definition);
        const propertyMap = context_1.Reflector.getMetadata(exports.MODEL_PROPERTIES_KEY, target.prototype);
        for (const p in propertyMap) {
            modelDef.addProperty(p, propertyMap[p]);
        }
        target.definition = modelDef;
    };
}
exports.model = model;
/**
 * Decorator for model properties
 * @param definition
 * @returns {(target:any, key:string)}
 */
function property(definition) {
    return function (target, key) {
        // Apply model definition to the model class
        context_1.Reflector.defineMetadata(exports.PROPERTY_KEY, definition, target, key);
        // Because there is no way how to iterate decorated properties at runtime,
        // we need to keep an explicit map of decorated properties
        let map = context_1.Reflector.getMetadata(exports.MODEL_PROPERTIES_KEY, target);
        if (!map) {
            map = Object.create(null);
            context_1.Reflector.defineMetadata(exports.MODEL_PROPERTIES_KEY, map, target);
        }
        map[key] = definition;
    };
}
exports.property = property;
//# sourceMappingURL=model.js.map