import { Class } from './common-types';
/**
 * Interface for functions that can mix properties/methods into a base class
 *
 * For example,
 * ```
 * var calculatorMixin = Base => class extends Base {
 *   calc() { }
 * };
 *
 * function timestampMixin(Base) {
 *   return class extends Base {
 *     created: Date = new Date();
 *     modified: Date = new Date();
 *   }
 * }
 * ```
 * See http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/.
 */
export interface MixinFunc {
    <BC extends Class<any>>(baseClass: BC): BC;
}
/**
 * A builder to compose mixins
 */
export declare class MixinBuilder {
    baseClass: Class<any>;
    /**
     * Constructor for MixinBuilder
     * @param baseClass The base class
     */
    constructor(baseClass: Class<any>);
    /**
     * Apply one or more mixin functions
     * @param mixins An array of mixin functions
     */
    with(...mixins: MixinFunc[]): Class<any>;
    /**
     * Create an instance of MixinBuilder with the base class
     * @param baseClass The base class
     */
    static mix(baseClass: Class<any>): MixinBuilder;
}
